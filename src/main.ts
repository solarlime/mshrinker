#!/usr/bin/env node

import fs from 'node:fs';
import os from 'node:os';
import isToolAvailable from './isToolAvailable';
import copyMetadata from './copyMetadata';
import encodeFile from './encodeFile';
import parseFileName from './parseFileName/parseFileName';
import allowedExtensions from './parseFileName/allowedExtensions';
import checkOutputFile from './checkOutputFile';
import getParameters from './getParameters';
import defineFolders from './defineFolders';
import runRAMMode from './runRAMMode';

const args = process.argv.slice(2);
if (args[0] === '--help' || args[0] === '-h' || args[0] === undefined) {
  console.log('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞');
} else {
  Promise.all([
    isToolAvailable('exiftool', '-ver'),
    isToolAvailable('ffmpeg', '-version'),
    isToolAvailable('ffprobe', '-version'),
  ])
    .then(() => {
      const { inputFolder, outputFolder } = defineFolders(args);

      fs.readdir(inputFolder, async (error, files) => {
        if (error) {
          throw new Error(
            '‚ùå  –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏',
          );
        } else {
          if (files.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return;
          } else {
            console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
            for (const inputFile of files) {
              const { name, extension } = parseFileName(inputFile);

              if (inputFile.startsWith('.')) {
                console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª ${inputFile}`);
                continue;
              }

              if (!extension || !allowedExtensions.includes(extension)) {
                console.warn(
                  `‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª ${inputFile} —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º`,
                );
                continue;
              }

              // Exiftool –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä m4v. –ò—Å–ø–æ–ª—å–∑—É–µ–º mov
              const outputExtension =
                extension.toLowerCase() === 'm4v' ? 'mov' : extension;
              const outputFile = `${name}.${outputExtension}`;
              const { width, height, size } = await getParameters(
                `${inputFolder}/${inputFile}`,
              );

              const osType = os.platform();
              const totalMemory = os.totalmem();

              if (osType === 'darwin' && Math.floor(totalMemory / 4) > size) {
                console.log(
                  `üî• –§–∞–π–ª ${inputFile} –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ SSD!`,
                );
                await runRAMMode(
                  inputFolder,
                  inputFile,
                  outputFolder,
                  outputFile,
                  size,
                  width,
                  height,
                );
              } else {
                console.log(
                  `‚ÑπÔ∏è –°–æ–∑–¥–∞—é —Å–∂–∞—Ç—É—é –∫–æ–ø–∏—é ${inputFile} –≤ ${outputFolder}`,
                );
                await encodeFile(
                  `${inputFolder}/${inputFile}`,
                  `${outputFolder}/${outputFile}`,
                  width,
                  height,
                ).catch(console.error);

                const { isOutputFileNew } = await checkOutputFile(
                  `${inputFolder}/${inputFile}`,
                  `${outputFolder}/${outputFile}`,
                );
                if (isOutputFileNew) {
                  console.log(`‚ÑπÔ∏è –ö–æ–ø–∏—Ä—É—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ ${inputFile}`);
                  await copyMetadata(
                    `${inputFolder}/${inputFile}`,
                    `${outputFolder}/${outputFile}`,
                  )
                    .then(() =>
                      console.log(`‚úÖ  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ ${outputFile}`),
                    )
                    .catch(console.error);
                } else {
                  console.log(
                    `‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —ç—Ç–∞–ø –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: —Ñ–∞–π–ª ${inputFile} –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω`,
                  );
                }

                console.log(
                  `‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.indexOf(inputFile) + 1} –∏–∑ ${files.length}`,
                );
              }
            }
          }
          console.log(
            `\n\n‚úÖ  –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`,
          );
        }
      });
    })
    .catch(console.error);
}
