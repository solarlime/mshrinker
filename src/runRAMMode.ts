import { join } from 'node:path';
import { execSync } from 'node:child_process';
import encodeFile from './encodeFile';
import { copyFile } from 'node:fs/promises';
import copyMetadata from './copyMetadata';

export default async function runRAMMode(
  inputFolder: string,
  inputFile: string,
  outputFolder: string,
  outputFile: string,
  size: number,
  width: number,
  height: number,
) {
  let diskId = null;
  const ramDisk = outputFile;
  const mountPath = `/Volumes/${ramDisk}`;
  const tempPath = join(mountPath, outputFile);

  const source = join(inputFolder, inputFile);
  const target = join(outputFolder, outputFile);

  // hdutil –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–ª–æ–∫–∞—Ö, 1 –±–ª–æ–∫ = 512 –±–∞–π—Ç
  const blocks = Math.ceil(size / 512);

  console.log('üíΩ –°–æ–∑–¥–∞–Ω–∏–µ RAM-–¥–∏—Å–∫–∞...');
  diskId = execSync(`hdiutil attach -nomount ram://${blocks}`)
    .toString()
    .trim();
  console.log(`üìÄ –î–∏—Å–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω: ${diskId}`);

  console.log('üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ HFS+...');
  execSync(`diskutil erasevolume HFS+ ${ramDisk} ${diskId}`);
  console.log(`üìÄ –î–∏—Å–∫ ${mountPath} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
  try {
    const { success } = await encodeFile(
      `${inputFolder}/${inputFile}`,
      tempPath,
      width,
      height,
    );
    if (success) {
      console.log(`‚úÖ  –§–∞–π–ª ${inputFile} —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç. –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞ –¥–∏—Å–∫`);
      await copyFile(tempPath, `${outputFolder}/${outputFile}`);
      console.log(
        `‚úÖ  –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª ${outputFile} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ${outputFolder}`,
      );
      console.log(`‚ÑπÔ∏è –ö–æ–ø–∏—Ä—É—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ ${inputFile}`);
      await copyMetadata(
        `${inputFolder}/${inputFile}`,
        `${outputFolder}/${outputFile}`,
      );
      console.log(`‚úÖ  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ ${outputFile}`);
    } else {
      console.log(`‚ö†Ô∏è –ù–æ–≤—ã–π —Ñ–∞–π–ª –±–æ–ª—å—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É—é –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª`);
      await copyFile(source, target);
      console.log(`‚úÖ  –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ${target} ‚Äî –∫–æ–ø–∏—è ${source}`);
    }
  } catch (e) {
    console.error(e);
  } finally {
    console.log('üîå –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAM-–¥–∏—Å–∫–∞...');
    try {
      execSync(`diskutil eject ${mountPath}`);
      console.log('üßπ RAM-–¥–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω');
    } catch (ejectErr) {
      console.warn(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å RAM-–¥–∏—Å–∫:',
        (ejectErr as Error).message,
      );
    }
  }
}
